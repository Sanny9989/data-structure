#include <stdio.h>
#include <stdlib.h>
#define MAX 100  
typedef struct {
    int data[MAX];
    int front;
    int rear;
    int size;
} Queue;
void initQueue(Queue *q);
int isEmpty(Queue *q);
int isFull(Queue *q);
void enqueue(Queue *q, int item);
int dequeue(Queue *q);
int peek(Queue *q);
void displayQueue(Queue *q);
void initQueue(Queue *q) {
    q->front = 0;
    q->rear = -1;
    q->size = 0;
}int isEmpty(Queue *q) {
    return q->size == 0;
}
int isFull(Queue *q) {
    return q->size == MAX;
}
void enqueue(Queue *q, int item) {
    if (isFull(q)) {
        printf("Queue is full\n");
        return;
    }
    q->rear = (q->rear + 1) % MAX;
    q->data[q->rear] = item;
    q->size++;
}
int dequeue(Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return -1;  
    }
    int item = q->data[q->front];
    q->front = (q->front + 1) % MAX;
    q->size--;
    return item;
}
int peek(Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return -1;  
    }
    return q->data[q->front];
}

void displayQueue(Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return;
    }
    printf("Queue contents: ");
    for (int i = 0; i < q->size; i++) {
        int index = (q->front + i) % MAX;
        printf("%d ", q->data[index]);
    }
    printf("\n");
}
int main() {
    Queue q;
    initQueue(&q);
    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    displayQueue(&q); 
    printf("Dequeued: %d\n", dequeue(&q));  
    printf("Front item: %d\n", peek(&q));  
    displayQueue(&q); 

    return 0;
}

output:-
Queue contents: 10 20 30 
Dequeued: 10
Front item: 20
Queue contents: 20 30 
